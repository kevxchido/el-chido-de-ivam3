#!/data/data/com.termux/files/usr/bin/bash
#Created on July/2021
IFS=$'\n\t'
trap ctrl_c 2
source $HOME/.local/share/i-Haklab/.set/var/variables
source $iHAKLAB/.set/functions/functions
toInstall="$1"
ctrl_c(){ printf "\n$Y\n   (¿) Need a help (?)$B\nTelegram : t.me/Ivam3_Bot$W\n";}
Err() { printf "$R\n(_>)─➤$W Installation failed";ctrl_c;exit;}
PS(){ printf "$G(_>)─➤$W Installing python modules.\n ╰─────➤$W (it could take a while)...\n";}
PIPup() {
	for PYv in python2 python ;do
		$PYv -m pip install --no-color --quiet --upgrade pip
	done
}
BASIC() {
        python$PYv -m pip install --quiet --no-cache-dir -r $TMPDIR/requirements.txt
}
LDFLAGS() {
        export LDFLAGS="-L/system/lib/ -lm -lcompiler_rt"
        python$PYv -m pip install --quiet --no-cache-dir --global-option="build_ext" --global-option="--disable-jpeg" -r $TMPDIR/requirements.txt
}
SODIUM() {
        export SODIUM_INSTALL=system
	python$PYv -m pip install --quiet --no-cache-dir --no-binary :all: -r $TMPDIR/requirements.txt
}
PYmodules() {
	printf "$G(_>)─➤$W There are 3 methods of installing the modules: choose one$Y\n ╰───(01)─➤$W BASIC$Y\n ╰───(02)─➤$W LDFLAGS$Y\n ╰───(03)─➤$W SODIUM\n\n"

	while read -p "(_>)─➤ " ANSW && [ -z $ANSW ]; do
		continue
	done
	if [[ $ANSW = '1' ]] || [[ $ANSW = '01' ]]; then
		PS;BASIC
	elif [[ $ANSW = '2' ]] || [[ $ANSW = '02' ]]; then
		PS;LDFLAGS
	elif [[ $ANSW = '3' ]] || [[ $ANSW = '03' ]]; then
		PS;SODIUM
	else
		printf "$R(_>)─➤$W method $ANSW doesn't exist\n"
		exit 0
	fi
}
goEnv() {
	yes|apt install golang
	[[ -d ~/go/pkg/mod/github.com ]] || mkdir -p $HOME/go/pkg/mod/github.com
	[[ -d $PREFIX/lib/go/src ]] || mkdir -p $PREFIX/lib/go/src

	if ! $(grep -oE "GOPATH" $INITFILE);then
		sed -i "21a set GOPATH $HOME/go" $INITFILE
	fi
	if ! $(grep -oE "GOROOT" $INITFILE); then
		sed -i "22a set GOROOT $PREFIX/lib/go" $INITFILE
	fi
}

if [[ $SHELL = $PREFIX/bin/fish ]];then
	INITFILE="$PREFIX/etc/fish/config.fish"
else
	INITFILE="$PREFIX/etc/bash.bashrc"
fi

[[ $toInstall = desktop-xfce4 ]] && toInstall=xfce4-about
[[ $toInstall = localtunnel-server ]] && toInstall="lt"
[[ $toInstall = JohnTheRipper ]] && toInstall="john"
[[ $toInstall = login-termux ]] && login="$(grep -oE "$toInstall" $INITFILE)"
[[ $toInstall = twifo-cli ]] && toInstall="twifo"
[[ $toInstall = wfuzz ]] && toInstall="fuzzdb"
if [[ -d $TOOLS/$toInstall ]] || [[ -e $PREFIX/bin/$toInstall ]] || [[ -e $HOME/.local/bin/$toInstall ]] || [[ -d $PREFIX/opt/$toInstall ]] || [[ -e ~/go/bin/$toInstall ]] || [[ ! -z $login ]];then
	printf "$R(_>)─➤$W $1 it's already installed";exit
fi
running
yes|apt autoremove
APTupdate
case "$toInstall" in
	alltools)
		alltools=$(cat $iHAKLAB/.set/libexec/Tools/listoftools)
		for i in ${alltools[*]};do
			bash $iHAKLAB/.set/share/install $i
		done
		;;
	dex2jar)
		link="https://github.com/pxb1988/dex2jar/releases/download"
		releases="v2.2-SNAPSHOT-2021-10-31"
		zipFile="dex-tools-2.2-SNAPSHOT-2021-10-31.zip"
		yes|apt install wget unzip openjdk-17
		wget --quiet --tries=20 $iHDB/bin/$toInstall -O $HOME/.local/bin/$toInstall
		wget --quiet --tries=20 $link/$releases/$zipFile -O $TMPDIR/$toInstall.zip
		unzip $TMPDIR/$toInstall.zip -d $TOOLS
		d2jDIR=$(ls $TOOLS|grep dex-tools)
		mv $TOOLS/$d2jDIR $TOOLS/$toInstall
		rm -rf $TMPDIR/$toInstall.zip
		;;
	kalilinux)
		yes|pkg install wget curl proot tar && wget https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Installer/Kali/kali-xfce.sh -O kali-xfce.sh && chmod +x kali-xfce.sh && bash kali-xfce.sh 
		cat <<- CONF > ~/kali-fs/etc/apt/sources.list
		deb [trusted=yes]  http://http.kali.org/kali kali-rolling main contrib non-free
		#deb http://ftp.debian.org/debian buster main
		#deb http://ftp.debian.org/debian buster-updates main
		CONF
		printf "$G(_>)─➤$W Follow the the next steps$G\t
		(01)─➤$W run $toInstall < ./start-kali.sh >$G\t
		(02)─➤$W update $toInstall < apt-get update && apt-get upgrade >$G\t
		(03)─➤$W start vnc server < vncserver :1 > on this step you have to set a password$G\t
		(04)─➤$W download vnc viewer app from https://bit.ly/2VUguQM$G\t
		(05)─➤$W open the app, touch the plus(+) bottom and set a new connection with address as localhost:1 and name as Kali Linux$G\t
		(06)─➤$W type your password and enjoy it!!\n"
		;;
	#::PYTHON3::#
	h8mail|objection|osrframework)
		yes|apt install python
		PIPup
		PYv=""
		printf "$toinstall" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	binwalk)
		yes|apt install git python
		PIPup
		git clone --quiet https://github.com/ReFirmLabs/$toInstall $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		chmod 750 *
		python setup.py install
		;;
	botgram)
		yes|apt install git python
		PIPup
		git clone --quiet https://github.com/ivam3/$toInstall $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		chmod 750 *
		printf "numpy\ntelethon\nrequests\nconfigparser" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		python setup.py --install
		python setup.py --config
		;;
	evilurl)
		yes|apt install python git
		PIPup
		PYv=""
		git clone --quiet https://github.com/UndeadSec/EvilURL.git $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		printf "python-nmap\npython-whois" > $TMPDIR/requirements.txt
		PYmodules
		rm -rf $TMPDIR/requirements.txt
		;;
	fuzzdb)
		yes|apt install git wget python
		PIPup
		PYv=""
		git clone --quiet https://github.com/fuzzdb-project/$toInstall.git --depth 1 $TOOLS/$toInstall
		wget -q $iHDB/wordlist/$toInstall/big.txt -O $TOOLS/$toInstall/wordlists-user-passwd/big.txt
		wget -q $iHDB/wordlist/$toInstall/common.txt -O $TOOLS/$toInstall/wordlists-misc/common.txt
		chmod +x -R $TOOLS/$toInstall
		printf "wfuzz" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	getnpusers)
		yes|apt install git wget python rust
		PIPup
		Pyv=""
		wget -q https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/GetNPUsers.py -O $HOME/.local/bin/$toInstall
		printf "urllib3\nrequests\nmock\nidna\nbiopython\nrust\nimpacket" > $TMPDIR/requirements.txt
		PYmodules
		chmod 711 $HOME/.local/bin/$toInstall
		rm -f $TMPDIR/requirements.txt
		yes|apt remove rust;apt autoremove
		;;
	ghost)
		yes|apt install python openssl git
		git clone --quiet https://github.com/EntySec/ghost $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		;;
	hakku)
		yes|apt install git python
		git clone --quiet https://github.com/4shadoww/hakkuframework.git $TOOLS/$toInstall
		chmod 750 $TOOLS/$toInstall/$toInstall
		;;
	hunner)
		yes|apt install git python
		PIPup
		PYv=""
		git clone --quiet https://github.com/b3-v3r/Hunner.git $TOOL/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "httplib2" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	infoga)
		yes|apt install python git
		PIPup
		PYv=""
		git clone --quiet https://github.com/m4ll0k/$toInstall $TOOLS/$toInstall
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	ipgeolocation)
		yes|apt install python git
		PIPup
		PYv=""
		git clone --quiet https://github.com/maldevel/IPGeoLocation.git $TOOLS/$toInstall
		printf "termcolor\ncolorama" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	osintgram)
		yes|apt install python git
		PIPup
		Pyv=""
		git clone --quiet https://github.com/datalux/Osintgram.git $TOOLS/$toInstall
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		PS3="(_>)─➤ "
		printf "$Y(_>)─➤$W $toInstall needs an instagram acccount credentials."
		select way in Set_credentials Skip_this_step;do
			case $way in
				Set_credentials)
					while read -p "(_>)_username─➤ " username && [ -z $username ];do
						continue
					done
					while read -p "(_>)_passwd─➤ " passwd && [ -z $passwd ];do
						continue
					done
					printf "[Credentials]\nusername = $username\npassword = $passwd" > $TOOLS/$toInstall/config/credentials.ini
					;;
				*)
					printf "$Y(_>)─➤$W Don't forget set your credentials at file: $TOOLS/$toInstall/config/credentials.ini"
					ctrl_c;exit
					;;
			esac
		done
		;;
	phomber)
		yes|apt install python git
		PIPup
		PYv=""
		git clone --quiet https://github.com/s41r4j/phomber $TOOLS/$toInstall
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		PS3="(_>)─➤ "
		printf "$Y(_>)─➤$W $toInstall needs an API key from opencagedata.com."
		select way in Set_credentials Skip_this_step;do
			case $way in
				Set_credentials)
					while read -p "(_>)_username─➤ " username && [ -z $username ];do
						continue
					done
					while read -p "(_>)_passwd─➤ " passwd && [ -z $passwd ];do
						continue
					done
					printf "[Credentials]\nusername = $username\npassword = $passwd" > $TOOLS/$toInstall/config/credentials.ini
					;;
				*)
					printf "$Y(_>)─➤$W Don't forget set your credentials at file: $TOOLS/$toInstall/config/credentials.ini"
					ctrl_c
					;;
			esac
		done
		;;
	NULL-phoneinfoga-NULL)
		yes|apt install python git wget unstable-repo geckodriver
		PIPup
		PYv=""
		git clone --quiet https://github.com/sundowndev/PhoneInfoga.git $TOOLS/$toInstall
		wget -q $iHDB/fix-tools/$toInstall.py -O $TOOLS/$toInstall/$toInstall.py
		cp $TOOLS/$toInstall/config.example.py $TOOLS/$toInstall/config.py
		if [ "$(uname -m)" = 'aarch64' ] || [ "$(uname -m)" = 'x86_64' ];then
			bits=64
		else
			bits=32
		fi
		if ! $(command -v geckodriver);then
			wget -q https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-linux$bits.tar.gz -O $TMPDIR/geckodriver-v0.29.1-linux$bits.tar.gz
			tar -xvzf $TMPDIR/geckodriver-v0.29.1-linux$bits.tar.gz -C $TMPDIR > /dev/null 2>&1
			rm $TMPDIR/geckodriver-v0.29.1-linux$bits.tar.gz
			mv $TMPDIR/geckodriver $HOME/.local/bin/
			chmod +x $HOME/.local/bin/geckodriver
		fi
		printf "phonenumbers\nselenium\nbs4\ngoogle_api\nconfig\nhtml5lib\ngeckodriver-autoinstaller" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	quack)
		yes|apt install wget python
		PYPup
		PYv=""
		wget -q https://raw.githubusercontent.com/Monkey-hk4/quack/main/quack -O $HOME/.local/bin/quack
		chmod +x $HOME/.local/bin/quack
		printf "install\nsetuptools\nphonenumbers\nrequests\nscapy\nwget\nargparse" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	recon-ng)
		yes|apt install git python libxml2 libxml2-static libxml2-utils libxslt libxslt-static
		PIPup
		PYv=""
		git clone --quiet https://github.com/lanmaster53/$toInstall $TOOLS/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "PYyaml\nshodan\ndicttoxml\ndnspython\njsonrpclib\nlxml\nmechanize\nslowaes\nXlsxWriter\nolefile\nPyPDF2\nflask\nunicodecsv" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	routersploit)
		apt install git python
		PIPup
		PYv=""
		git clone --quiet https://github.com/threat9/$toInstall.git $TOOLS/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "future\nrequests\npysnmp\npycrypto\ncryptography\nparamiko\nbcrypt\npynacl" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	seeker)
		[[ -e $HOME/.local/bin/ngrok.io ]] || { printf >&2 "$R\n(_>)─➤ ERROR :$W ngrok is not installed\n";ctrl_c;}
		yes|apt install git python
		PIPup
		PYv=""
		git clone --quiet https://github.com/thewhiteh4t/$toInstall.git $TOOLS/$toInstall
		mkdir -p $TOOLS/$toInstall/Ngrok
		cp ~/.ngrok2/ngrok $TOOLS/$toInstall/Ngrok/
		chmod 750 -R $TOOLS/$toInstall/*
		printf "requests" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	shellsploit)
		yes|apt install git python
		PIPup
		PYv=""
		git clone --quiet https://github.com/vasco2016/$toInstall-framework $TOOLS/$toInstall
		chmod 711 -R $TOOLS/$toInstall
		printf "capstone\nreadline\npefile\ncolorama\npylzma" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	sherlock)
		yes|apt install git python
		PIPup
		PY=""
		git clone --quiet https://github.com/$toInstall-project/$toInstall.git $TOOL/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "beautifulsoup\nbs\ncertifi\ncolorama\nlxml\nPySocks\nrequests\nrequests-futures\nsoupsieve\nstem\ntorrequest" >> $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	sublist3r)
		yes|apt install python git
		PIPup
		PYv=""
		git clone --quiet https://github.com/aboul3la/Sublist3r.git $TOO
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	sqlmap)
		printf "$C#::::::::::::::::::::::::::::::::::::#$Y\n(_>)─➤$W Choose a type of installation$G\n(_>)_01─➤$W Python-pip modules$G\n(_>)_02─➤$W Github\n"
		while read -p "(_>)─➤ " ANSW && [ -z $ANSW ]; do
			continue
		done
		if [[ $ANSW = 1 ]] || [[ $ANSW = 01 ]];then
			yes|pkg install python
			PIPup
			PY=""
			printf "sqlmap" > $TMPDIR/requirements.txt
			PYmodules
			rm -f $TMPDIR/requirements.txt
		elif [[ $ANSW = 2 ]] || [[ $ANSW = 02 ]];then
			git clone --quiet https://github.com/$toInstallproject/$toInstall $TOOLS/$toInstall
			chmod 750 -R $TOOLS/$toInstall
		else
			Err
		fi
		;;
	NULL-theharvester-NULL)
		yes|apt install git python libxml2 libxml2-static libxml2-utils libxslt libxslt-static rust
		PIPup
		PYv=""
		git clone --quiet https://github.com/laramies/theHarvester.git $TOOLS/$toInstall
		cat $TOOLS/$toInstall/requirements/dev.txt > $TMPDIR/requirements.txt
		sed -i 's|/etc/theHarvester|/data/data/com.termux/files/usr/etc/theHarvester|g' setup.py
		python setup.py install
		PYmodules
		rm -f $TMPDIR/requirements.txt
		yes|apt remove rust && apt autoremove
		;;
	vulnx)
		yes|apt install git python
		PIPup
		PYv=""
		git clone --quiet https://github.com/anouarbensaad/$toInstall $TOOLS/$toInstall
		rm $TOOLS/$toInstall/install.sh
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -rf $TMPDIR/requirements.txt
		;;
	#::PYTHON2::#
	a2sv)
		yes|apt install git python2 openssl
		PIPup
		Pyv="2"
		git clone --quiet https://github.com/hahwul/$toInstall.git $TOOLS/$toInstall
		chmod +x $TOOLS/$toInstall/*
		printf "argparse\nnetaddr" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	adminpanel)
		yes|apt install git python2
		git clone --quiet https://github.com/Techzindia/admin_penal.git $TOOLS/$toInstall
		chmod 750 $TOOLS/$toInstall/admin_panel_finder.py
		mv $TOOLS/$toInstall/admin_panel_finder.py $TOOLS/$toInstall/$toInstall.py
		;;
	androbugs)
		yes|apt install git python2
		git clone --quiet https://github.com/AndroBugs/AndroBugs_Framework.git $TOOLS/$toInstall
		;;
	d-tect)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/shawarkhanethicalhacker/D-TECT-1.git $TOOLS/$toInstall
		chmod +x -R $TOOLS/$1/*
		printf "colorama\nbeautifulsoup" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	cc-genpro)
		yes|apt install git python2 neofetch
		git clone --quiet https://github.com/HackeRStrategy/cc-genpro1.2 $TOOLS/$toInstall
		chmod 750 $TOOLS/$toInstall/*
		;;
	cloudbunny)
		yes|apt install python2 git
		PIPup
		PYv="2"
		git clone --quiet https://github.com/Warflop/CloudBunny.git $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		printf "certificates" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	credmap)
		yes|apt install python2 git
		PIPup
		PYv="2"
		git clone --quiet https://github.com/lightos/$toInstall.git $TOOLS/$toInstall
		chmod 750 $TOOLS/$toInstall/$toInstall.py
		printf "urllib2" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	cryptovenom)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/lockedbyte/$toInstall $TOOLS/$toInstall
		cp $TOOLS/$toInstall/aux/$toInstall.py $TOOLS/$toInstall
		chmod 711 -R $TOOLS/$toInstall
		printf "base58\nscrypt\npyblake2\npycrypto\ncrypto\nbcrypt\nrc2\ntwofish\ngeesefly\nskein pycipher\nnumpy\nCrypto\npasslib\nbase91\nmom\ngmpy2\nmore_itertools\nargon2_cffi" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	fbi)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/xHak9x/$toInstall.git $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		printf "requests" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	hasher)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/CiKu370/$toInstall.git $TOOLS/$toInstall
		printf "progressbar\npasslib" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	kerbrute)
		yes|apt install git python2 rust
		PIPup
		PYv="2"
		git clone --quiet https://github.com/TarlogicSecurity/kerbrute.git $TOOLS/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "impacket" > $TMPDIR/requirements.txt
		PYmodules
		yes|apt remove rust;apt autoremove
		rm -f $TMPDIR/requirements.txt
		;;
	phonesploit)
		command -v adb > /dev/null 2>&1 || exec i-Haklab install abdfastboot
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/aerosol-can/PhoneSploit.git $TOOLS/$toInstall
		printf "colorama" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	pybelt)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/Ekultek/Pybelt.git $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		sed 's|beautifulsoup4==4.5.3|beautifulsoup4==4.7.1|g' -i requirements.txt
		cat $TOOLS/$toInstall/requirements.txt > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	recondog)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/s0md3v/ReconDog.git $TOOLS/$toInstall
		chmod 750 -R $TOOLS/$toInstall
		printf "requests\ntld" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	sqliv)
		yes|apt install python2 wget unzip libxml2 libxml2-static libxml2-utils libxslt libxslt-static
		PIPup
		PYv="2"
		wget -q $iHDB/to-install/$toInstall.zip
		unzip -q $toInstall.zip -d $TOOLS
		rm $toInstall.zip
		chmod 750 -R $TOOLS/$toInstall
		printf "terminaltables\ntermcolor\nnyawc" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		;;
	websploit)
		yes|apt install git python2
		PIPup
		PYv="2"
		git clone --quiet https://github.com/The404Hacking/$toInstall $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		printf "numpy\n" > $TMPDIR/requirements.txt
		PYmodules
		rm -rf $TMPDIR/requirements.txt
		;;#::BASH::#
	ExiF)
		yes|apt install wget exiftool
		wget -q https://raw.githubusercontent.com/ivam3/Exif/master/ExiF -O $TOOLS/$toInstall
		chmod 751 $TOOLS/$toInstall
		;;
	exploitdb)
		yes|apt install git wget
		git clone --quiet https://github.com/offensive-security/$toInstall.git $TOOLS/$toInstall
		chmod +x $TOOLS/$toInstall/*
		wget -q $iHDB/fix-tools/searchsploit -O ~/.searchsploit_rc
		;;
	lockphish)
		[[ -e $PREFIX/bin/ngrok ]] || { printf >&2 "$R\n(_>)─➤ ERROR :$W ngrok is not installed\n";ctrl_c;}
		yes|apt install git wget
		git clone --quiet https://github.com/JasonJerry/$toInstall $TOOLS/$toInstall
		rm -f $TOOLS/$toInstall/$toInstall.sh 
		wget -q $iHDB/fix-tools/$toInstall -O $TOOLS/$toInstall/$toInstall
		chmod 711 $TOOLS/$toInstall/*
		;;
	login-termux)
		if [[ ! -e $HOME/.local/etc/i-Haklab/.Ivam3 ]];then
			bash $iHAKLAB/.set/to-install/i-Haklab_login;login
		elif [[ $(grep "wall-banner" $INITFILE) ]];then
			yes|apt install ruby && gem install lolcat
			sed 's|/data/data/com.termux/files/home/.local/etc/i-Haklab/wall-banner|/data/data/com.termux/files/home/.local/etc/i-Haklab/login-termux|g' -i $INITFILE
		else
			printf "$R\n(_>)─➤ Login is already active"
		fi
		;;
	nexphisher)
		[[ -e $PREFIX/bin/ngrok ]] || { printf >&2 "$R\n(_>)─➤ ERROR :$W ngrok is not installed\n";ctrl_c;exit;}
		yes|apt install git
		git clone --quiet https://github.com/htr-tech/$toInstall $TOOLS/$toInstall
		chmod +x $TOOLS/$toInstall/*
		cd $TOOLS/$toInstall
		bash tmux_setup
		wget -q $iHDB/fix-tools/$toInstall -O $TOOLS/$toInstall/$toInstall
		;;
	saycheese|sayhello)
		[[ -e $PREFIX/bin/ngrok ]] || { printf >&2 "$R\n(_>)─➤ ERROR :$W ngrok is not installed\n";ctrl_c;}
		yes|apt install wget unzip openssh
		wget -q $iHDB/to-install/$toInstall.zip -O $TMPDIR/$toInstall.zip
		unzip -q $TMPDIR/$toInstall.zip -d $TOOLS
		rm -rf $TMPDIR/$toInstall.zip
		wget -q $iHDB/fix-tools/$toInstall -O $TOOLS/$toInstall/$toInstall
		chmod +x $TOOLS/$toInstall/*
		;;
	userrecon)
		yes|apt install git
		git clone --quiet https://github.com/issamelferkh/userrecon $TOOLS/$toInstall
		mv $TOOLS/$toInstall/$toInstall.sh $TOOLS/$toInstall/$toInstall
		chmod 750 $TOOLS/$toInstall/$toInstall
		;;
	wbruter)
		yes|apt install git
		git clone --quiet https://github.com/wuseman/WBRUTER.git $TOOLS/$toInstall
		chmod +750 -R $TOOLS/$toInstall
		;;
	#::BIN::#
	adbfastboot)
		for BIN in adb adb.bin fastboot fastboot-armeabi;do
			wget -q $iHDB/bin/$BIN -O $HOME/.local/bin/$BIN
			chmod +x $HOME/.local/bin/$BIN
		done
		if [[ ! -d $HOME/adbfiles ]];then
			mkdir $HOME/adbfiles
		fi
		;;
	burpsuite)
		[[ -e $PREFIX/bin/java ]] && yes|pkg remove openjdk-17
		printf "$G\n(_>)─➤ Installing $toInstall (It could take a while)...\n"
		wget -q --tries=20 https://github.com/termux/termux-packages/suites/4742204683/artifacts/131051875 -O $TMPDIR/termux-packages-aarch64.zip
		unzip $TMPDIR/termux-packages-aarch64.zip -d $TM0DIR
		tar xvf $TMPDIR/debs-aarch64-1e2023f351d547b82494edfb0f5baac0fd490370.tar -O debs/openjdk-17_17.0-17_aarch64.deb > $TMPDIR/openjdk-17_17.0-17_aarch64.deb
		dpkg -i $TMPDIR/openjdk-17_17.0-17_aarch64.deb
		rm -rf $TMPDIR/*
		ln -s $PRERIX/lib/libgif.so.7.2.0 $PREFIX/opt/openjdk/lib/libgif.so.7
		wget -q --tries=20 https://portswigger.net/burp/releases/download -O $TOOLS/$toInstall.jar
		cat <<- CONF $HOME/.local/bin/$toInstall
#!/usr/bin/bash
#This file execute a burp suite on Termux:Wayland interface
#You should install it before to run this scripta
[[ \$(uname -m) = "aarch64" ]] || { printf >&2 "\$R(_>)─➤\$W Incompatible architecture";exit;}
[[ -e $TOOLS/burpsuite.jar ]] || { printf >&2 "\$R(_>)─➤\$W Burpsuite is not installed...\$R aborting.\$W";exit;}
[[ \$(file \$TMPDIR/*|grep -o "socket") >/dev/null ]] || { printf >&2 "\$R(_>)─➤\$W Termux:Wayland server isn't running...\$R aborting.\$W";exit;}
export DISPLAY=:0
umask 000
exec \$(command -v java) --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED -jar $TOOLS/burpsuite.jar
CONF
    chmod 755 $HOME/.local/bin/$toInstall
		;;
	code-server)
		yes|apt install build-essential python git nodejs-lts yarn
		yarn config set ignore-engines true
		yarn global add $toInstall --ignore-engines
		printf "$G(_>)_Set_a_login_password$W "
		while read -p ":─➤ " passwd && [ -z $passwd ];do
			continue
		done
		[[ -d ~/.config/code-server ]] || mkdir -p ~/.config/$toInstall
		cat <<- CONF > ~/.config/$toInstall/config.yaml
		bind-addr: 127.0.0.1:8080
		auth: password
		password: $passwd
		cert: false
		CONF
		;;
	desktop-xfce4|xfce4-about)
		for i in vnc icons themes config;do
			rm -rf ~/.$i
		done
		mv ./music $HOME/.local/bin/music
		apt autoremove;yes|pkg install x11-repo xfce4 xfce4-taskmanager dosbox xfce4-terminal python-tkinter htop neofetch loqui vim-gtk the-powder-toy galculator xorg-xhost mpv-x ristretto xfce4-whiskermenu-plugin xfce4-clipman-plugin xarchiver tigervnc geany geany-plugins gtk3 gtk2 mtpaint leafpad hexchat otter-browser recordmydesktop feh audacious lxqt-themes papirus-icon-theme lxappearance fluent-icon-theme fluent-gtk-theme;yes|pkg install xfce4-* kvantum zenity mate-terminal mate-settings-daemon dbus-glib dconf termux-api wireshark-gtk
		for v in music stopdesktop startdesktop; do
			cp -rf ~/termux-desktop-xfce/$v $HOME/.local/bin
		done
		for a in backgrounds .icons .themes .vnc .config; do
			cp -rf ~/termux-desktop-xfce/$a $HOME
		done
		mkdir ~/Desktop ~/Downloads ~/Templates ~/Public ~/Documents ~/Pictures ~/Video
		cp -rf $HOME/termux-desktop-xfce/README.desktop $HOME/Desktop
		ln -s $HOME/storage/music $HOME/Music
		exec vncserver;sleep 3
		sed 's|/twm &|xfce4-session &|g' -i ~/.vnc/xstartup
		printf "$G\nDONE!!$Y\n\nNOW GO TO PLAY STORE AND DOWNLOAD VNC SERVER APP$G\n[RUN ON TERMUX]─➤$W vncserver$G\n      ╰─────────➤ At first time, you will be prompted for setting up passwords$Y\nOPEN VNC APP AND SET NETWORK ADDRESS AS : localhost:1$G\n[TO STOP IT]─➤$W vncserver -kill :1\n"
		;;
	binchecker|crunch|i-Haklab|IbyC-fixer|blackbox|converter|lock|pagekite|serverphp|torvpn)
		yes|apt install curl
		curl -Ls $iHDB/bin/$toInstall -o $HOME/.local/bin/$toInstall
		chmod 751 $HOME/.local/bin/$toInstall
		;;
	hydra)
		yes|apt install git make automake -y
		git clone --quiet https://github.com/vanhauser-thc/thc-$toInstall $PREFIX/opt/thc-$toInstall
		cd $PREFIX/opt/thc-$toInstall
		make clean && sh configure;make;make install
		if [[ -e $PREFIX/opt/thc-$toInstall/$toInstall ]] && [[ -e $PREFIX/opt/thc-$toInstall/x$toInstall ]];then
			chmod +x $PREFIX/opt/thc-$toInstall/*
			cp $PREFIX/opt/thc-$toInstall/$toInstall $HOME/.local/bin/
			cp $PREFIX/opt/thc-$toInstall/x$toInstall $HOME/.local/bin/
			cp -r $PREFIX/opt/thc-$toInstall $TOOLS/$toInstall
			rm -rf $PREFIX/opt/thc-$toInstall
		else
			printf "$R\n\t      《ERR COMPILE》\n";Err
		fi
		;;
	JohnTheRipper|john)
		JTRv="1.8.0"
		JTRtar="https://download.openwall.net/pub/projects/john/contrib/android/john-$JTRv-android-1.tar.gz"
		yes|apt install wget
		wget -q $JTRtar -O $TMPDIR/john-$JTRv-android-1.tar.gz
		tar -xvzf $TMPDIR/john-$JTRv-android-1.tar.gz -C $TMPDIR
		rm -rf $TMPDIR/john-$JTRv-android-1.tar.gz
		mkdir -p $PREFIX/opt/john
		JTR="$PREFIX/opt/john"
		mv $TMPDIR/john-$JTRv-android/user/* $JTR
		ln -s $JTR/john.conf $JTR/john.ini
		sleep 2
		case $(uname -m) in
			aarch64)
				mv $TMPDIR/john-$JTRv-android/libs/arm64-v8a/* $JTR
				;;
			arm)
				mv $TMPDIR/john-$JTRv-android/libs/armeabi/* $JTR
				;;
			armhf)
				mv $TMPDIR/john-$JTRv-android/libs/armeabi-v7a/* $JTR
				;;
			i686)
				mv $TMPDIR/john-$JTRv-android/libs/x86/* $JTR
				;;
			x86_64)
				mv $TMPDIR/john-$JTRv-android/libs/x86_64/* $JTR
				;;
		esac
		rm -rf $TMPDIR/john-$JTRv-android
		chmod +x $JTR/*
		printf "#!/usr/bin/bash
#This script find and execute johntheripper tool
R='\\033[1;31m'
W='\\033[0m'
if [ -d \$PREFIX/opt/john ];then
	cd \$PREFIX/opt/john
	./john \$@
else
	printf \"\$R(_>)─➤\$W JohnTheRipper is not installed\$W\"
fi
#            i-Haklab by @Ivam3" > $HOME/.local/bin/john
		chmod +x $HOME/.local/bin/john
		;;
	java)
		yes|apt install git
		git clone --quiet https://github.com/ivam3/java.git $PREFIX/share/java
		cd $PREFIX/share/java
		chmod -R 711 $PREFIX/share/java
		bash setup java8
		rm -rf $PREFIX/share/java
		;;
	localtunnel-server|lt)
		yes|apt install nodejs git
		git clone --quiet git://github.com/defunctzombie/$toInstall.git $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		npm install
		npm install -g localtunnel
		wget -q $iHDB/fix-tools/openurl.js -O $PREFIX/lib/node_modules/localtunnel/node_modules/openurl/openurl.js
		rm -rf $TOOLS/$toInstall
		;;
	ngrok)
		arch1=$(uname -a|grep -o 'arm'|head -n1)
		arch2=$(uname -a|grep -o 'Android'|head -n1)
		command -v wget >/dev/null || pkg install wget
		[ -e $PREFIX/etc/apt/sources.list.d/abhacker.repo.list ] && yes|apt install ngrok-server;yes|apt reinstall ngrok-server || curl -sSL $(iHDB)/fix-tools/instAbhackerRepo|bash --install ngrok-server
		[[ $arch1 = 'arm' ]] || [[ $arch2 = 'Android' ]] && arch=arm || arch=386
		wget -q https://bin.equinox.io/c/4VmDzA7iaHb/$1-stable-linux-$arch.zip -O $TMPDIR/$1-stable-linux-$arch.zip
		if [[ -e $TMPDIR/$1-stable-linux-$arch.zip ]];then
			[[ -d ~/.ngrok2 ]] || mkdir -p ~/.ngrok2
			unzip -q $TMPDIR/$1-stable-linux-$arch.zip -d ~/.ngrok2/
			rm -rf $TMPDIR/$1-stable-linux-$arch.zip
			printf "#!/bin/bash\n#THIS SCRIPT EXECUTE NGROK TO AVOID 'bad address' ERROR\nexec termux-chroot $HOME/.ngrok2/ngrok \${@:1}\n#     i-Haklab by Ivam3" > $HOME/.local/bin/$1.io
			chmod +x ~/.ngrok2/$1 $HOME/.local/bin/$1.io
			#sed -i 's|link=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[0-9a-z]*\.ngrok.io")|curl -sSL http://localhost:4040/api/tunnels|cut -d '"' -f14|awk -F "/" '{print $3}'|cut -d ":" -f2|g' $PREFIX/bin/$toInstall
			PS3="(_>)─➤ "
			printf "$Y(_>)─➤$W $toInstall needs an authtoken from $1.com$Y\n"
			select way in Set_authtoken Skip_this_step;do
				case $way in
					Set_authtoken)
						while read -p "(_>)_authtoken─➤ " token && [ -z $token ];do
							continue
						done
						ngrok.io authtoken $token
						break
						;;
					*)
						printf "$Y(_>)─➤$W Don't forget set your token running:$Y\n ╰─────➤$W $toInstall authtoken <your-token>";exit
						;;
				esac
			done
		else
			Err
		fi
		;;
	serverapache)
		yes|apt install php apache2 php-pgsql php-fpm php-apache mariadb phpmyadmin
		[[ -d $PREFIX/etc/apache2 ]] || mkdir -p $PREFIX/etc/apache2
		[[ -d $PREFIX/etc/phpmyadmin ]] || mkdir -p $PREFIX/etc/phpmyadmin
		wget -q $iHDB/etc/apache2/httpd.conf -O $PREFIX/etc/apache2/httpd.conf
		wget -q $iHDB/etc/phpmyadmin/config.inc.php -O $PREFIX/etc/phpmyadmin/config.inc.php
		if ! grep "$toInstall" $INITFILE;then
			echo "alias $toInstall=\"apachectl\""
		fi
		printf "$G\n\n(_>)_to_run_it─➤$W $toInstall start$G\n(_>)_to_stop_it─➤$W $toInstall stop$G\n(_>)_to_open_it─➤$W open http://localhost:8080\n"
		;;
	shc|unshc)
		shcVer="3.8.9"
		yes|apt install wget make
		wget -q http://www.datsi.fi.upm.es/~frosal/sources/shc-$shcVer.tgz -O $TMPDIR/shc-$shcVer.tgz
		tar -xvzf $TMPDIR/shc-$shcVer.tgz -C $TMPDIR
		rm -rf $TMPDIR/shc-$shcVer.tgz
		cd $TMPDIR/shc-$shcVer
		make;make install
		mv $TMPDIR/shc-$shcVer/$toInstall $HOME/.local/bin/
		rm -rf $TMPDIR/shc-$shcVer
		wget -q https://raw.githubusercontent.com/yanncam/UnSHc/master/latest/unshc.sh -O $HOME/.local/bin/unshc
		sed 's|which|command -v|g' -i $HOME/.loczl/bin/unshc
		sed 's|/tmp/XXXXXX|$PREFIX/tmp/XXXXXX|g' -i $HOME/.local/bin/unshc
		chmod +x $HOME/.local/bin/*
		;;
	slowhttptest)
		yes|apt install git make automake
		git clone --quiet https://github.com/shekyan/$toInstall $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		./configure && make && make install
		cp $TOOLS/$toInstall/src/$1 $HOME/.local/bin
		chmod +x $HOME/.local/bin/$toInstall
		;;
	snow)
		yes|apt install wget make automake
		wget -q http://http.kali.org/pool/main/s/steg$toInstall/steg$toInstall_20130616.orig.tar.gz -O $TMPDIR/steg$toInstall_20130616.orig.tar.gz
		tar -xvzf $TMPDIR/stegsnow_20130616.orig.tar.gz -C $TMPDIR
		cd $TMPDIR/$toInstall-20130616/
		make
		mv $TMPDIR/$toInstall-20130616/$toInstall $HOME/.local/bin
		rm -rf $TMPDIR/snow-20130616/
		rm -rf $TMPDIR/stegsnow_20130616.orig.tar.gz
		chmod 750 $HOME/.local/bin/$toInstall
		;;
	tmux)
		yes|apt install tmux git
		[[ -d $HOME/.tmux ]] && rm -rf $HOME/.tmux
		git clone https://github.com/gpakosz/.tmux.git $HOME/.tmux
		ln -s -f $HOME/.tmux/.tmux.conf
		cp $HOME/.tmux/.tmux.conf.local .
		sed -i "11a set-option -g default-shell $PREFIX/bin/fish" ~/.tmux/.tmux.conf
		;;
	torvpn)
		yes|apt install tor torsocks proxychains-ng
		wget -q $iHDB/etc/tor/torrc -O $PREFIX/etc/tor/torrc
		wget -q $iHDB/etc/proxychains.conf -O $PREFIX/etc/proxychains.conf
		for i in myip mypip swip ; do
			wget -q $iHDB/bin/$i -O $HOME/.local/bin/$i
			chmod 750 $HOME/.local/bin/$i
		done
		;;
	twifo-cli|twifo)
		yes|apt install nodejs
		npm install -global $toInstall-cli
		;;
	youtube-dl|converter)
		if [[ $toInstall = youtube-dl ]];then
			dpkg --configure -a
			yes|apt install util-linux wget python
			PIPup
			PYv=""
			printf "$toInstall" > $TMPDIR/requirements.txt
			PYmodules
			rm -f $TMPDIR/requirements.txt
			mkdir -p ~/.config/youtube-dl
			ln -s $PREFIX/bin ~/bin
			wget -q https://raw.githubusercontent.com/ivam3/youtube-dl/master/.data/.netrc -O ~/.netrc
			chmod 711 ~/.netrc
			wget -q https://raw.githubusercontent.com/ivam3/youtube-dl/master/.data/LhDxGbtY -O $HOME/.local/bin/termux-url-opener
			dos2unix $HOME/.local/bin/termux-url-opener
			chmod 711 $HOME/.local/bin/termux-url-opener
		elif [[ $toInstall = converter ]];then
			wget -q $iHDB/.set/bin/$toInstall -O $HOME/.local/bin/$toInstall
			chmod 750 $HOME/.local/bin/$toInstall
		fi
		;;
	#::RUBY::#
	beef)
		yes|apt install ruby nodejs #dirmngr -y
		if [[ ! -d $PREFIX/opt ]];then
			mkdir -p $PREFIX/opt
		fi
		git clone --quiet https://github.com/$1project/$toInstall $PREFIX/opt/$toInstall
		sed "s|database: '/opt/GeoIP/GeoLite2-City.mmdb'|database: '/data/data/com.termux/files/usr/opt/GeoIP/GeoLite2-City.mmdb'|g" -i config.yaml
		sed 's|passwd: "beef"|passwd: "Ivam3byCinderella"|g' -i config.yaml
		sed '155 s|enable: false|enable: true|g' -i config.yaml
		sed "s|ssl_version: 'TLS1'|ssl_version: 'TLS1.2'|g" -i $PREFIX/opt/$toInstall/extensions/metasploit/config.yaml
		cd $PREFIX/opt/$toInstall
		update --system
		gem install bundler
		bundle install
		curl -Ls ${iHDB}/fix-tools/fixbigdecimal|bash
		wget -q $iHDB/bin/$1 -O $HOME/.local/bin/$1
		chmod +x $HOME/.local/bin/$1
		wget -q $iHDB/to-install/GeoLite2-City_20200331.tar.gz -O $PREFIX/opt/$1/GeoLite2-City_20200331.tar.gz
		if [[ -e $PREFIX/opt/$1/GeoLite2-City_20200331.tar.gz ]];then
			gunzip $PREFIX/opt/$1/GeoLite2-City_20200331.tar.gz
			if [[ -e $PREFIX/opt/$1/GeoLite2-City_20200331.tar ]];then
				tar xvf $PREFIX/opt/$1/GeoLite2-City_20200331.tar
				rm -rf $PREFIX/opt/$1/GeoLite2-City_20200331.tar
				if [[ ! -d $PREFIX/opt/GeoIP ]];then
					mkdir -p $PREFIX/opt/GeoIP
				else
					Err
				fi
				if [[ -d $PREFIX/opt/$1/GeoLite2-City_20200331 ]];then
					mv $PREFIX/opt/$1/GeoLite2-City_20200331/* $PREFIX/opt/GeoIP
					rm -rf $PREFIX/opt/$1/GeoLite2-City_20200331
				else
					Err
				fi
			else
				Err
			fi
		else
			Err
		fi
		;;
	embed)
		chk-msf
		chk-java
		yes|apt install git axel wget tar apksigner aapt
		git clone --quiet https://github.com/ivam3/$toInstall.git $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		chmod +x $TOOLS/$toInstall/$toInstall
		bash setup
		curl -Ls https://raw.githubusercontent.com/ivam3/java/master/.$toInstall/apk.rb	$PREFIX/opt/metasploit-framework/lib/msf/core/payload/apk.rb
		;;
	cewl)
		yes|apt install ruby git
		git clone --quiet https://github.com/digininja/CeWL $TOOLS/$toInstall
		cd $TOOLS/$toInstall
		chmod +x -R $TOOLS/$toInstall
		bundle install
		;;
	hatcloud)
		yes|apt install git ruby
		git clone --quiet https://github.com/HatBashBR/HatCloud.git $TOOLS/$toInstall
		chmod 750 $TOOLS/$toInstall/$toInstall.rb
		;;
	metasploit)
		[[ -d $PREFIX/lib/ruby ]] && rm -rf $PREFIX/lib/ruby;yes|apt remove ruby;yes|apt autoremove
		msfv="6.1.20_all"
		msfGit="https://github.com/rapid7/metasploit-framework.git"
		rubyLIBv=$(ls $PREFIX/lib/ruby|sort -r|grep -m 1 '[0-9].[0-9].[0-9]')
		[[ -d $PREFIX/opt/metasploit-framework ]] && rm -rf $PREFIX/opt/metasploit-framework
		[[ -d $PREFIX/var/lib/postgresql ]] && rm -rf $PREFIX/var/lib/postgresql
		yes|apt install autoconf patchelf bison apr apr-util postgresql libgrpc libtool libcap wget termux-elf-cleaner ruby build-essential binutils
		mkdir -p $PREFIX/opt
		for i in aarch64-linux-android arm-linux-androideabi \
			i686-linux-android x86_64-linux-android;do
					if [ -e "$PREFIX/lib/ruby/$rubyLIBv/${i}/bigdecimal.so" ];then
						[[ -n "$(patchelf --print-needed "$PREFIX/lib/ruby/$rubyLIBv/${i}/bigdecimal/util.so"|grep bigdecimal.so)" ]] && exit 0
						patchelf --add-needed \
							"$PREFIX/lib/ruby/$rubyLIBv/${i}/bigdecimal.so" \
							"$PREFIX/lib/ruby/$rubyLIBv/${i}/bigdecimal/util.so"
					fi
		done
		git clone --quiet --depth 1 $msfGit $PREFIX/opt/metasploit-framework
		[[ -d $PREFIX/opt/metasploit-framework ]] || { printf "$R\n(_>)─➤$W Metasploit directory missing...$R Aborting.$W";exit;}
		sed -i "5a gem 'net-smtp', require: false" $PREFIX/opt/metasploit-framework/Gemfile
		gem install --no-document --verbose rubygems-update
		update_rubygems
		gem install --no-document --verbose bundler
		bundle update --bundler
		gem install rails --platform=ruby -- --use-system-libraries
		gem install nokogiri --platform=ruby -- --use-system-libraries
		bundle config build.nokogiri --use-system-libraries
		gem install actionpack
		cd $PREFIX/opt/metasploit-framework
		bundle install -j$(nproc --all) --verbose
		sed -i "s@/etc/resolv.conf@$PREFIX/etc/resolv.conf@g" $PREFIX/opt/metasploit-framework/lib/net/dns/resolver.rb
		sed -i "s|\\\c|\\\C\\-\\\s|g" $PREFIX/opt/metasploit-framework/lib/msf/core/exploit/remote/vim_soap.rb
		find $PREFIX/opt/metasploit-framework -type f -executable -print0 | xargs -0 -r termux-fix-shebang
		find $PREFIX/lib/ruby/gems -type f -iname \*.so -print0 | xargs -0 -r termux-elf-cleaner
		cat <<- EOF > $PREFIX/bin/msfconsole
#!/data/data/com.termux/files/usr/bin/sh

SCRIPT_NAME=\$(basename "\$0")
METASPLOIT_PATH="$PREFIX/opt/metasploit-framework"

case "\$SCRIPT_NAME" in
        msfconsole)
                if [ ! -d "$PREFIX/var/lib/postgresql" ]; then
                        mkdir -p "$PREFIX/var/lib/postgresql"
                        initdb "$PREFIX/var/lib/postgresql"
                fi
                if ! pg_ctl -D "$PREFIX/var/lib/postgresql" status > /dev/null 2>/dev/null; then
                        pg_ctl --silent -D "$PREFIX/var/lib/postgresql" start >/dev/null
                fi
                if [ -z "\$(psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='msf'")" ]; then
                        createuser msf
                fi
                if [ -z "\$(psql -l | grep msf_database)" ]; then
                        createdb msf_database
                fi
                exec ruby "\$METASPLOIT_PATH/\$SCRIPT_NAME" "\$@"
                ;;
        msfd|msfrpc|msfrpcd|msfvenom)
                exec ruby "\$METASPLOIT_PATH/\$SCRIPT_NAME" "\$@"
                ;;
        *)
                echo "[!] Unknown Metasploit command '\$SCRIPT_NAME'."
                exit 1
                ;;
esac
EOF
		chmod 755 $PREFIX/bin/msfconsole
		for i in msfd msfrpc msfrpcd msfvenom;do
			ln -sfr $PREFIX/bin/msfconsole $PREFIX/bin/$i
		done
		mkdir -p $PREFIX/opt/metasploit-framework/config
		cat <<- EOF > $PREFIX/opt/metasploit-framework/config/database.yml
production:
  adapter: postgresql
  database: msf_database
  username: msf
  password:
  host: 127.0.0.1
  port: 5432
  pool: 75
  timeout: 5
EOF
		mkdir -p $PREFIX/var/lib/postgresql
		pg_ctl -D $PREFIX/var/lib/postgresql stop > /dev/null 2>&1 || true
		if ! pg_ctl -D $PREFIX/var/lib/postgresql start --silent;then
			initdb $PREFIX/var/lib/postgresql
			pg_ctl -D $PREFIX/var/lib/postgresql start --silent
		fi
		[[ -z "$(psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='msf'")" ]] && createuser msf
		[[ -z "$(psql -l|grep msf_database)" ]] && createdb msf_database
		cd;rm -rf $PREFIX/opt/metasploit-framework/.git*
		wget -q $JAVADB/.embed/apk.rb -O $PREFIX/opt/metasploit-framework/lib/msf/core/payload/apk.rb
		if ! cat $INITFILE | grep -oE "postgresql" --silent;then
			sed -i "4a alias postgresql=\"pg_ctl -D $PREFIX/var/lib/postgresql\"" $INITFILE
		fi
	    ;;
    whatweb)
	    chk-msf
	    yes|apt install ruby git
	    git clone https://github.com/urbanadventurer/WhatWeb $TOOLS/$toInstall
	    cd $TOOLS/$toInstall
	    gem update --system 
	    gem install bundler
	    printf "#!/usr/bin/bash
	    # Coded on Agust 2019 by Ivam3 and upgraded on July 2021
	    IFS=$'\\n\\t'
	    R='\\033[1;31m'
	    W='\\033[0m'
	    if [ -d $TOOLS/$toInstall ];then
	           pushd $TOOLS/whatweb
		   exec ruby $TOOLS/whatWeb/whatweb \${@:1}
		   popd
	   else
	           printf \"\$R(_>)─➤\$W Whatweb is not installed.\"
		   exit
	    fi
	    #                       i-Haklab by @Ivam3" > $HOME/.local/bin/$toInstall
	    chmod 711 $HOME/.local/bin/whatweb
	    [[ -e $PREFIX/etc/hosts ]] || touch $PREFIX/etc/hosts
	    ;;
    wpscan)
	    yes|apt install git ruby
	    git clone --quiet https://github.com/wpscanteam/$toInstall $TOOLS/$toInstall
	    gem install $toInstall -- --use-system-libraries
	    chmod 750 $TOOLS/$toInstall/bin/*
	    curl -Ls ${iHDB}/fix-tools/fixbigdecimal|bash
	    ;;
	#::GO::
	amass)
		goEnv
		export GO111MODULE=on
		go get -v github.com/OWASP/Amass/v3/...
		chmod 751 -R ~/go
		goa=$(find ~/go/pkg/mod/github.com -type d -iname "!$toInstall"|head -n 1)
		ln -s $goa/$(ls $goa) $PREFIX/lib/go/src/$toInstall
		cd $gob/$(ls $gob)
		go get && go build && go install
		;;
	aquatone)
		goEnv
		git clone --quiet https://github.com/michenriksen/$toInstall ~/go/pkg/mod/github.com/$toInstall
		ln -s $HOME/go/pkg/mod/github.com/$toInstall $HOME/$toInstall
		wget -q $iHDB/bin/$toInstall -O $HOME/.local/bin/$toInstall
		gem install --quiet --silent $toInstall
		;;
	gobuster)
		goEnv
		go install github.com/OJ/$toInstall/v3@latest
		chmod 751 -R ~/go
		gob=$(find ~/go/pkg/mod/github.com -iname $toInstall)
		ln -s $gob/$(ls $gob) $PREFIX/lib/go/src/$toInstall
		cd $gob/$(ls $gob)
		go get && go build && go install
		;;
	gophish)
		goEnv
		go get github.com/$toInstall/$toInstall
		chmod 751 -R ~/go
		gop1=$(find ~/go/pkg/mod/github.com -type d -iname $toInstall|head -n 1)
		gop2=$(ls $gop1|grep $toInstall)
		mv ~/go/bin/$toInstall $gop1/$gop2/$toInstall
		cat <<- CONF > ~/go/bin/$toInstall
		#!/usr/bin/bash
		cd $gop1/$gop2
		exec $gop1/$gop2/$toInstall
		#           i-Haklab by Ivam3.
		CONF
		chmod +x ~/go/bin/$toInstall
		sed 's|"listen_url": "0.0.0.0:80",|"listen_url": "127.0.0.1:8080",|g' -i $gop1/$gop2/config.json
		chmod 640 $gop1/$gop2/config.json
		;;
	tangalanga)
		goEnv
		go get github.com/elcuervo/$toInstall
		chmod 751 -R ~/go
		got=$(find ~/go/pkg/mod/github.com -type d -iname "$toInstall*")
		cd $got
		go get
		go build
		go install
		;;
	virustotal)
		for repo in unstable-repo $toInstall-cli;do
			PKG=$(pkg list-all|grep -o $repo)
			if [[ ! -z "$PKG" ]];then
				yes|pkg install $repo
			elif [[ ! -d $HOME/go/src/github.com/VirusTotal/vt-cli ]]; then
				goEnv
				go get -d github.com/VirusTotal/vt-cli/vt
				cd ~/go/src/github.com/VirusTotal/vt-cli
				make install
				ln -s ~/go/bin/vt $HOME/.local/bin/vt
				exec vt completion bash > $PREFIX/etc/bash_completion.d/vt
			fi
		done
		;;
	#::PERL::#
	DoS-A-Tool)
		yes|apt install wget perl
		wget -q https://raw.githubusercontent.com/ivam3/$toInstall/master/$toInstall -O $HOME/.local/bin/$toInstall
		chmod +x $HOME/.local/bin/$toInstall
		dos2unix $HOME/.local/bin/$toInstall
		;;
	acccheck)
		yes|apt install git perl
		git clone --quiet https://github.com/qashqao/$toInstall $TOOLS/$toInstall
		chmod +x -R $TOOl/$toInstall
		;;
	#:PHP:#
	rhawk)
		yes|apt install php
		git clone --quiet https://github.com/Tuhinshubhra/RED_HAWK.git $TOOLS/$toInstall
		chmod +x $TOOLS/$toInstall/$toInstall.php
		;;
	#::ROOT::#
	aircrack-ng)
		if chk-root;then
			yes|apt install root-repo aircrack-ng ethtool macchanger
		else
			STDERROOT
		fi
		;;
	bettercap)
		if chk-root;then
			yes|apt install ruby
			gem install bettercap
		else
			STDERROOT
		fi
		;;
	dnsenum)
		if chk-root;then
			apt install curl perl
			curl -Ls https://raw.githubusercontent.com/fwaeytens/$toInstall/master/$toInstall.pl -o $HOME/.local/bin/$toInstall
			termux-fix-shebang $HOME/.local/bin/$toInstall
			chmod +x $HOME/.local/bin/$toInstall
			for repo in WWW::Mechanize Net::IP Net::DNS Net::Netmask XML::Writer String::Random ; do
				cpan -i $repo
			done
			[[ -d $PREFIX/share/$toInstall ]] || mkdir -p $HOME/.local/share/$toInstall
			[[ -d ~/.$toInstall ]] || mkdir -p ~/.$toInstall
			curl https://raw.githubusercontent.com/fwaeytens/$toInstall/master/dns.txt -o $HOME/.local/share/$toInstall/dns.txt
			exec sudo $toInstall
		else
			STDERROOT
		fi
		;;
	nikto)
		if chk-root;then
			yes|apt install git wget perl
			git clone --quiet https://github.com/sullo/nikto.git $TOOLS/$toInstall
			chmod 750 -R $TOOLS/$toInstall
			wget -q $iHDB/bin/nikto -O $HOME/.local/bin/$toInstall
			chmod +x $HOME/.local/bin/nikto
		else
			STDERROOT
		fi
		;;
	webhackshl)
		yes|apt install git curl python tor ruby nmap
		PIPup
		PY=""
		git clone --quiet https://github.com/sechacklabs/$toInstall.git $TOOLS/$toInstall
		wget -q $iHDB/fix-tools/checker.py -O $TOOLS/$toInstall/modules/checker.py
		printf "fierce" > $TMPDIR/requirements.txt
		PYmodules
		rm -f $TMPDIR/requirements.txt
		for i in sqlmap nikto whatweb wpscan dnsenum;do
			exec i-Haklab install $i
		done
		;;
	xerosploit)
		TMPPATH=$PREFIX/opt/$toInstall
		if chk-root; then
			yes|apt install git nmap hping3 build-essential python2 ruby git libpcap
			PIPup
			PYv="2"
			git clone --quiet https://github.com/LionSec/$toInstall.git $TMPPATH
			printf "tabulate\nterminaltables" > $TMPDIR/requirements.txt
			chmod +x -R $TMPPATH/tools
			PYmodules
			rm -f $TMPDIR/requirements.txt
			cd $TMPPATH/tools/bettercap/
			gem build bettercap.*
			gem install xettercap-*
			for del in xettercap-* $TMPPATH/run.sh $TMPPATH/$toInstall.py;do
				rm -rf $del
			done
			wget -q $iHDB/fix-tools/$toInstall.py -O $TMPPATH/$toInstall.py
		fi
		;;
	sudo)
		if chk-root;then
			yes|apt install curl
			if [[ ! -d $HOME/.suroot ]];then
				mkdir ~/.suroot
				touch ~/.suroot/.bashrc
			fi
			#set colored=true to turn on colored e
			#set colored=false to turn off colored error messages
			colored=true
			#red=1 green=2 yellow=3
                        color() {
                                if [ $colored == "true" ];then
                                        echo "$(tput setaf $toInstall)${*:2}$(tput sgr0)"
                                else
                                        echo "${*:2}"
                                fi
                                }
                        SYSBIN=/system/bin
                        SYSXBIN=/system/xbin
                        BB=$SYSXBIN/busybox
                        PRE=/data/data/com.termux/files
                        ROOT_HOME=$PRE/home/.suroot
                        BINPRE=$PRE/usr/bin
                        LDLP="export LD_LIBRARY_PATH=$PRE/usr/lib"
                        CMDLINE="PATH=$PATH:$SYSXBIN:$SYSBIN;$LDLP;HOME=$ROOT_HOME;cd $PWD"

                        #set root user enviroment
                        printf "$G(_>)─➤$W Build root enviroment ..";
                        wget -q $iHDB/.set/bin/$1 -O $HOME/.local/bin
                        if [ -e ~/.suroot/.bashrc ];then
                                for opt in 1 2 3 4;do
                                        if [ ! -O ~/.suroot/.bashrc ]; then
                                                let try=opt++
                                                sudo chown $USER:$USER -R ~/.suroot
                                                if [ $try -gt 3 ];then
                                                        printf "$R. DENIED$Y\n(_>)─➤$W to fix it try 'chmod $USER:$USER -R ~/.suroot' and reinstall\n";Err
                                                fi
                                        fi
                                done
                        else
                                if [ ! -d ~/.suroot ]; then
                                        mkdir ~/.suroot
                                fi
                        fi
                        printf "PS1=\"\[\e[33m\][!] \[\e[31m\]Press\[\e[32m\] Ctrl d\[\e[31m\] to log out\[\e[32m\] ➤ \[\e[m\]\"
                        export TERM=xterm-256color
                        export LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib
                        export PATH=/data/data/com.termux/files/home/.local/bin:/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:/system/xbin:/system/bin
                        HOME=/data/data/com.termux/files/home
                        fish
                        #          i-Haklab by @Ivam3" > ~/.suroot/.bashrc
                        if [ -x $SYSXBIN/su ]; then
                                SU=$SYSXBIN/su
                        elif [ -x /su/bin/su ]; then
                                SU=/su/bin/su
                        elif [ -x /sbin/su ]; then
                                SU=/sbin/su
                        fi
                        if [ ! -d $ROOT_HOME ]; then
                                if [ -x $BB ] && [ $($BB --list | grep -w mount) == "mount" ]; then
                                        MOUNTEX="$BB mount"
                                elif [ -x $SYSBIN/mount ]; then
                                        MOUNTEX="$SYSBIN/mount"
                                fi
                                MOUNT_RW="$MOUNTEX -o rw,remount,rw /system"
                                MOUNT_RO="$MOUNTEX -o ro,remount,ro /system"
                                $SU -c "$MOUNT_RW"
                                $SU -c "mkdir $ROOT_HOME"
                                $SU -c "chmod 700 $ROOT_HOME"
                                BASHRC="'PS1=\"# \"\nexport TERM=$TERM\n$LDLP\nexport PATH=$PATH:$SYSXBIN:$SYSBIN'"
                                $SU -c "echo -e $BASHRC > $ROOT_HOME/.bashrc"
                                $SU -c "chmod 700 $ROOT_HOME/.bashrc"
                                $SU -c "$MOUNT_RO"
                        fi
                        # Reset echo
                        stty sane
                        if [ -e $PREFIX/bin/applets/sudo ]; then
                                rm $PREFIX/bin/applets/sudo
                        elif [ -e $PREFIX/bin/sudo ]; then
                                rm $PREFIX/bin/sudo
                        fi
                        curl -Ls $iHDB/to-install/$toInstall -o $HOME/.local/bin/$toInstall
                        chmod 750 $HOME/.local/bin/$toInstall
                        printf "$G. DONE!!$W"
                else
                        STDERROOT
                fi
                ;;
	*)
		printf "$R(_>)─➤$W Unable to locate $toInstall on i-Haklab\n"
		sleep 0.5
		printf "$G(_>)─➤$W Trying with Advance Packect Tool (APT)...\n"
		if [[ $(pkg list-all|grep -oE "$toInstall") ]];then
			yes|apt install $toInstall
		else
			printf "$R(_>)─➤$W Tool $toInstall doesn't exist\n"
			exit
		fi
		;;
esac
#ENDING SCRIPT
printf "$G\n\n (_>)-> :::::::::::::::::: DONE !! ::::::::::::::::::: <-(<_)$Y\n\tTo run $1 execute :$G run $toInstall$W\nFor more information execute: i-Haklab about $1$Y\n\t   To fix issues going to$B t.me/Ivam3_Bot$W\n\n"
#             i-Haklab by @Ivam3
